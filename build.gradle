apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'build-dashboard'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.0.0'
group = 'org.danilopianini'

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javalibs', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'net.sf.trove4j:trove4j:3.0.+'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

configurations {
    doclet
}

dependencies {
    doclet group: 'org.jboss.apiviz', name: 'apiviz', version: '1.3.2.GA'
}

eclipse {
	classpath {
    	downloadJavadoc = true
		downloadSources = true
	}
}

task aggregateJavadoc(type: Javadoc) {
    group 'Documentation'
    description 'Generates aggregated Javadoc API documentation for the main source code of all projects.'

    doFirst {
        subprojects.each { project ->
            project.sourceSets.main.output.each { dir ->
                dir.mkdirs()
            }
        }
    }
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })    
    options.addStringOption('sourceclasspath', files(subprojects.collect { project ->
        project.sourceSets.main.output
    }).getAsPath())
    destinationDir file("$project.buildDir/docs/javadoc/")
    options.showAll()
    options.addBooleanOption('nopackagediagram', true)
    configure(options) {
        windowTitle 'javalib'
        docTitle 'javalib'
        links 'http://docs.oracle.com/javase/8/docs/api/'
        doclet 'org.jboss.apiviz.APIviz'
        docletpath file(configurations.doclet.asPath)
    }
}    

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

checkstyleMain << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

checkstyleTest << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

findbugs {
	ignoreFailures = true
	effort = "max"
	reportLevel = "low"
}

pmd {
	ignoreFailures = true
	ruleSetFiles = files("pmd.xml")
}

checkstyle {
	ignoreFailures = true
	configFile = new File("style.xml")
}

task writePom << {
    pom {
        project {
            name 'JavaLib'
            description 'Handful shortcuts for Java programming'
            url 'https://github.com/DanySK/javalib'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
            	developer {
            		name 'Danilo Pianini'
            		email 'danilo.pianini@gmail.com'
            		url 'http://www.danilopianini.org'
            	}
            }
            scm {
            	url 'https://github.com/DanySK/javalib'
            	connection 'scm:git:git@github.com:DanySK/javalib.git'
            	developerConnection 'scm:git:git@github.com:DanySK/javalib.git'
            }
        }
    }.writeTo("$buildDir/pom.xml")
}

defaultTasks 'clean', 'build', 'check', 'assemble', 'install', 'aggregateJavadoc', 'writePom', 'buildDashboard'


