apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'build-dashboard'

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

// General configuration

jar {
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

configurations {
    doc {
        transitive false
    }
    doclet
}

dependencies {
    compile 'net.sf.trove4j:trove4j:3.0.+'
    
    testCompile 'junit:junit:4.+'
    
    doclet 'org.jboss.apiviz:apiviz:1.3.2.GA'
    
//    doc 'net.sf.trove4j:trove4j:3.0.+:sources'
}

// Artifacts configuration

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Eclipse configuration

eclipse {
	classpath {
    	downloadJavadoc = true
		downloadSources = true
	}
}

// FindBugs configuration

findbugs {
	ignoreFailures = true
	effort = "max"
	reportLevel = "low"
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

// PMD configuration

pmd {
	ignoreFailures = true
	ruleSetFiles = files("pmd.xml")
	targetJdk = pmdTargetJdk
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

// Checkstyle configuration

checkstyle {
	ignoreFailures = true
	configFile = new File("style.xml")
}

checkstyleMain << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

checkstyleTest << {
    ant.xslt(in: reports.xml.destination,
             style: new File("$project.projectDir/checkstyle-noframes-sorted.xsl"),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

// Javadoc Configuration

task aggregateJavadoc(type: Javadoc) {
	source configurations.doc.collect { zipTree(it) }
    source sourceSets.main.allJava
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
    include '**/*.java'
    destinationDir file("$project.buildDir/docs/javadoc/")
    options.showAll()
    options.addBooleanOption('nopackagediagram', true)
    configure(options) {
        windowTitle "$projectLongName version $project.version Javadoc API"
        docTitle "$projectLongName $project.version reference API"
        links 'http://docs.oracle.com/javase/8/docs/api/'
        links 'http://trove4j.sourceforge.net/javadocs/'
        doclet 'org.jboss.apiviz.APIviz'
        docletpath file(configurations.doclet.asPath)
    }
}

// POM configuration

task writePom << {
    pom {
        project {
            name artifactId
            description projectDescription
            url "$scmRootUrl/$artifactId"
            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
            	developer {
            		name 'Danilo Pianini'
            		email 'danilo.pianini@gmail.com'
            		url 'http://www.danilopianini.org'
            	}
            }
            scm {
            	url "$scmRootUrl/$artifactId"
            	connection "%scmType:$scmLogin/$scmRepoName"
            	developerConnection "%scmType:$scmLogin/$scmRepoName"
            }
        }
    }.writeTo("$buildDir/pom.xml")
}

defaultTasks 'clean', 'build', 'check', 'assemble', 'install', 'aggregateJavadoc', 'writePom', 'buildDashboard'


